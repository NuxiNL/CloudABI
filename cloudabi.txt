# Copyright (c) 2016 Nuxi, https://nuxi.nl/
#
# This file is distributed under a 2-clause BSD license.
# See the LICENSE file for details.

enum uint8 advice
	| File or memory access pattern advisory information.
	1 dontneed
		| The application expects that it will not access the
		| specified data in the near future.
	2 noreuse
		| The application expects to access the specified data
		| once and then not reuse it thereafter.
	3 normal
		| The application has no advice to give on its behavior
		| with respect to the specified data.
	4 random
		| The application expects to access the specified data
		| in a random order.
	5 sequential
		| The application expects to access the specified data
		| sequentially from lower offsets to higher offsets.
	6 willneed
		| The application expects to access the specified data
		| in the near future.

enum uint32 auxtype
	| Auxiliary vector entry type.
	@cprefix AT_
	256 argdata
		| Base address of the binary argument data provided to
		| [proc_exec].
	257 argdatalen
		| Length of the binary argument data provided to
		| [proc_exec].
	258 canary
		| Base address of a buffer of random data that may be
		| used for non-cryptographic purposes, for example as a
		| canary for stack smashing protection.
	259 canarylen
		| Length of a buffer of random data that may be used
		| for non-cryptographic purposes, for example as a
		| canary for stack smashing protection.
	260 ncpus
		| Number of CPUs that the system this process is running
		| on has.
	0   null
		| Terminator of the auxiliary vector.
	6   pagesz
		| Smallest memory object size for which individual
		| memory protection controls can be configured.
	3   phdr
		| Address of the first ELF program header of the
		| executable.
	4   phnum
		| Number of ELF program headers of the executable.
	261 tid
		| Thread ID of the initial thread of the process.

alias uint32 backlog
	| Number of incoming connections a socket is capable of keeping
	| in its backlog.

enum uint32 clockid
	| Identifiers for clocks.
	@cprefix CLOCK_
	1 monotonic
		| The system-wide monotonic clock, which is defined as a
		| clock measuring real time, whose value cannot be
		| adjusted and which cannot have negative clock jumps.
	2 process_cputime_id
		| The CPU-time clock associated with the current
		| process.
	3 realtime
		| The system-wide clock measuring real time. Time value
		| zero corresponds with 1970-01-01T00:00:00Z.
	4 thread_cputime_id
		| The CPU-time clock associated with the current thread.

opaque uint32 condvar
	| A userspace condition variable.
	0 has_no_waiters
		| The condition variable is in its initial state. There
		| are no threads waiting to be woken up. If the
		| condition variable has any other value, the kernel
		| must be called to wake up any sleeping threads.

opaque uint64 device
	| Device identifier that is unique within the system.

opaque uint64 dircookie
	| A reference to the offset of a directory entry.
	0 start
		| Permanent reference to the first directory entry
		| within a directory.

enum uint16 errno
	| Error codes returned by system calls.
	|
	| Not all of these error codes are returned by the system calls
	| provided by this environment, but are either used in userspace
	| exclusively or merely provided for alignment with POSIX.
	@cprefix E
	1  2big
		| Argument list too long.
	2  acces
		| Permission denied.
	3  addrinuse
		| Address in use.
	4  addrnotavail
		| Address not available.
	5  afnosupport
		| Address family not supported.
	6  again
		| Resource unavailable, or operation would block.
	7  already
		| Connection already in progress.
	8  badf
		| Bad file descriptor.
	9  badmsg
		| Bad message.
	10 busy
		| Device or resource busy.
	11 canceled
		| Operation canceled.
	12 child
		| No child processes.
	13 connaborted
		| Connection aborted.
	14 connrefused
		| Connection refused.
	15 connreset
		| Connection reset.
	16 deadlk
		| Resource deadlock would occur.
	17 destaddrreq
		| Destination address required.
	18 dom
		| Mathematics argument out of domain of function.
	19 dquot
		| Reserved.
	20 exist
		| File exists.
	21 fault
		| Bad address.
	22 fbig
		| File too large.
	23 hostunreach
		| Host is unreachable.
	24 idrm
		| Identifier removed.
	25 ilseq
		| Illegal byte sequence.
	26 inprogress
		| Operation in progress.
	27 intr
		| Interrupted function.
	28 inval
		| Invalid argument.
	29 io
		| I/O error.
	30 isconn
		| Socket is connected.
	31 isdir
		| Is a directory.
	32 loop
		| Too many levels of symbolic links.
	33 mfile
		| File descriptor value too large.
	34 mlink
		| Too many links.
	35 msgsize
		| Message too large.
	36 multihop
		| Reserved.
	37 nametoolong
		| Filename too long.
	38 netdown
		| Network is down.
	39 netreset
		| Connection aborted by network.
	40 netunreach
		| Network unreachable.
	41 nfile
		| Too many files open in system.
	42 nobufs
		| No buffer space available.
	43 nodev
		| No such device.
	44 noent
		| No such file or directory.
	45 noexec
		| Executable file format error.
	46 nolck
		| No locks available.
	47 nolink
		| Reserved.
	48 nomem
		| Not enough space.
	49 nomsg
		| No message of the desired type.
	50 noprotoopt
		| Protocol not available.
	51 nospc
		| No space left on device.
	52 nosys
		| Function not supported.
	53 notconn
		| The socket is not connected.
	54 notdir
		| Not a directory or a symbolic link to a directory.
	55 notempty
		| Directory not empty.
	56 notrecoverable
		| State not recoverable.
	57 notsock
		| Not a socket.
	58 notsup
		| Not supported, or operation not supported on socket.
	59 notty
		| Inappropriate I/O control operation.
	60 nxio
		| No such device or address.
	61 overflow
		| Value too large to be stored in data type.
	62 ownerdead
		| Previous owner died.
	63 perm
		| Operation not permitted.
	64 pipe
		| Broken pipe.
	65 proto
		| Protocol error.
	66 protonosupport
		| Protocol not supported.
	67 prototype
		| Protocol wrong type for socket.
	68 range
		| Result too large.
	69 rofs
		| Read-only file system.
	70 spipe
		| Invalid seek.
	71 srch
		| No such process.
	72 stale
		| Reserved.
	73 timedout
		| Connection timed out.
	74 txtbsy
		| Text file busy.
	75 xdev
		| Cross-device link.
	76 notcapable
		| Extension: Capabilities insufficient.

flags uint16 eventrwflags
	@cprefix EVENT_FD_READWRITE_
	0x01 hangup

enum uint8 eventtype
	| Type of a subscription to an event or its occurence.
	1 clock
		| The time value of clock [subscription.clock.clock_id]
		| has reached timestamp [subscription.clock.timeout].
	2 condvar
		| Condition variable [subscription.condvar.condvar] has
		| been woken up.
	3 fd_read
		| File descriptor [subscription.fd_readwrite.fd] has
		| data available for reading.
	4 fd_write
		| File descriptor [subscription.fd_readwrite.fd] has
		| capacity available for writing.
	5 lock_rdlock
		| Lock [subscription.lock.lock] has been acquired for
		| reading.
	6 lock_wrlock
		| Lock [subscription.lock.lock] has been acquired for
		| writing.
	7 proc_terminate
		| The process associated with process descriptor
		| [subscription.proc_terminate.fd] has terminated.

alias uint32 exitcode
	| Exit code generated by a process when terminating normally.

opaque uint32 fd
	| A file descriptor number.
	|
	| Unlike on POSIX-compliant systems, none of the file descriptor
	| numbers are reserved for a purpose (e.g., stdin, stdout,
	| stderr). Operating systems are not required to allocate new
	| file descriptors in ascending order.
	@cprefix
	0xffffffff process_child
		| Returned to the child process by [proc_fork].
	0xffffffff map_anon_fd
		| Passed to [mem_map] when creating a mapping to
		| anonymous memory.

flags uint16 fdflags
	| File descriptor flags.
	@cprefix FDFLAG_
	0x01 append
		| Append mode: data written to the file is always
		| appended to the file's end.
	0x02 dsync
		| Write according to synchronized I/O data integrity
		| completion.
	0x04 nonblock
		| Non-blocking mode.
	0x08 rsync
		| Synchronized read I/O operations.
	0x10 sync
		| Write according to synchronized I/O file integrity
		| completion.

flags uint16 fdsflags
	| Which file descriptor attributes to adjust.
	@cprefix FDSTAT_
	0x01 flags
		| Adjust the file descriptor flags stored in
		| [fdstat.fs_flags].
	0x02 rights
		| Restrict the rights of the file descriptor to the
		| rights stored in [fdstat.fs_rights_base] and
		| [fdstat.fs_rights_inheriting].

alias int64 filedelta
	| Relative offset within a file.

alias uint64 filesize
	| Non-negative file size or length of a region within a file.

flags uint16 fsflags
	| Which file attributes to adjust.
	@cprefix FILESTAT_
	0x01 atim
		| Adjust the last data access timestamp to the value
		| stored in [filestat.st_atim].
	0x02 atim_now
		| Adjust the last data access timestamp to the time
		| of clock [clockid.realtime].
	0x04 mtim
		| Adjust the last data modification timestamp to the
		| value stored in [filestat.st_mtim].
	0x08 mtim_now
		| Adjust the last data modification timestamp to the
		| time of clock [clockid.realtime].
	0x10 size
		| Truncate or extend the file to the size stored in
		| [filestat.st_size].

enum uint8 filetype
	| The type of a file descriptor or file.
	0x00 unknown
		| The type of the file descriptor or file is unknown or
		| is different from any of the other types specified.
	0x10 block_device
		| The file descriptor or file refers to a block device
		| inode.
	0x11 character_device
		| The file descriptor or file refers to a character
		| device inode.
	0x20 directory
		| The file descriptor or file refers to a directory
		| inode.
	0x30 fifo
		| The file descriptor or file refers to a FIFO inode or
		| one of the two endpoints of a pipe.
	0x40 poll
		| The file descriptor refers to a polling event queue.
	0x50 process
		| The file descriptor refers to a process handle.
	0x60 regular_file
		| The file descriptor or file refers to a regular file
		| inode.
	0x70 shared_memory
		| The file descriptor refers to a shared memory object.
	0x80 socket_dgram
		| The file descriptor or file refers to a datagram
		| socket.
	0x81 socket_seqpacket
		| The file descriptor or file refers to a
		| sequenced-packet socket.
	0x82 socket_stream
		| The file descriptor or file refers to a byte-stream
		| socket.
	0x90 symbolic_link
		| The file refers to a symbolic link inode.

opaque uint64 inode
	| File serial number that is unique within its file system.

alias uint32 linkcount
	| Number of hard links to an inode.

opaque uint32 lock
	| A userspace read-recursive readers-writer lock, similar to a
	| Linux futex or a FreeBSD umtx.
	0          unlocked
		| Value indicating that the lock is in its initial
		| unlocked state.
	0x40000000 wrlocked
		| Bitmask indicating that the lock is write-locked. The
		| lower 30 bits of the lock contain the identifier of
		| the thread that owns the write lock.
	0x80000000 kernel_managed
		| Bitmask indicating that the lock is either read locked
		| or write locked, and that one or more threads have
		| their execution suspended, waiting to acquire the
		| lock. The last owner of the lock must call the
		| kernel to unlock.
		|
		| When the lock is acquired for reading and this bit is
		| set, it means that one or more threads are attempting
		| to acquire this lock for writing. In that case, other
		| threads should only acquire additional read locks if
		| suspending execution would cause a deadlock. It is
		| preferred to suspend execution, as this prevents
		| starvation of writers.
	0x80000000 bogus
		| Value indicating that the lock is in an incorrect
		| state. A lock cannot be in its initial unlocked state,
		| while also managed by the kernel.

flags uint32 lookupflags
	@cprefix LOOKUP_
	1 symlink_follow

flags uint8 mflags
	@cprefix MAP_
	0x01 anon
	0x02 fixed
	0x04 private
	0x08 shared

flags uint8 mprot
	| Memory page protection options.
	|
	| This implementation enforces the W^X property. Pages cannot be
	| mapped for execution while also mapped for writing.
	@cprefix PROT_
	0x01 exec
		| Page can be executed.
	0x02 write
		| Page can be written.
	0x04 read
		| Page can be read.

flags uint8 msflags
	| Methods of synchronizing memory with physical storage.
	@cprefix MS_
	0x01 async
		| Perform asynchronous writes.
	0x02 invalidate
		| Perform synchronous writes.
	0x04 sync
		| Invalidate cached data.

flags uint16 msgflags
	@cprefix MSG_
	0x01 ctrunc
	0x02 eor
	0x04 peek
	0x08 trunc
	0x10 waitall

alias uint32 nthreads
	| Specifies the number of threads sleeping on a condition
	| variable that should be woken up.

flags uint16 oflags
	| Open flags used by [file_open].
	@cprefix O_
	0x01 creat
		| Create file if it does not exist.
	0x02 directory
		| Fail if not a directory.
	0x04 excl
		| Fail if file already exists.
	0x08 trunc
		| Truncate file to size 0.

flags uint64 rights
	@cprefix RIGHT_
	0x0000000000000001 fd_datasync
	0x0000000000000002 fd_read
	0x0000000000000004 fd_seek
	0x0000000000000008 fd_stat_put_flags
	0x0000000000000010 fd_sync
	0x0000000000000020 fd_tell
	0x0000000000000040 fd_write
	0x0000000000000080 file_advise
	0x0000000000000100 file_allocate
	0x0000000000000200 file_create_directory
	0x0000000000000400 file_create_file
	0x0000000000000800 file_create_fifo
	0x0000000000001000 file_link_source
	0x0000000000002000 file_link_target
	0x0000000000004000 file_open
	0x0000000000008000 file_readdir
	0x0000000000010000 file_readlink
	0x0000000000020000 file_rename_source
	0x0000000000040000 file_rename_target
	0x0000000000080000 file_stat_fget
	0x0000000000100000 file_stat_fput_size
	0x0000000000200000 file_stat_fput_times
	0x0000000000400000 file_stat_get
	0x0000000000800000 file_stat_put_times
	0x0000000001000000 file_symlink
	0x0000000002000000 file_unlink
	0x0000000004000000 mem_map
	0x0000000008000000 mem_map_exec
	0x0000000010000000 poll_fd_readwrite
	0x0000000020000000 poll_modify
	0x0000000040000000 poll_proc_terminate
	0x0000000080000000 poll_wait
	0x0000000100000000 proc_exec
	0x0000000200000000 sock_accept
	0x0000000400000000 sock_bind_directory
	0x0000000800000000 sock_bind_socket
	0x0000001000000000 sock_connect_directory
	0x0000002000000000 sock_connect_socket
	0x0000004000000000 sock_listen
	0x0000008000000000 sock_shutdown
	0x0000010000000000 sock_stat_get

enum uint8 sa_family
	| Socket address family.
	@cprefix AF_
	0 unspec
		| The socket address family is unknown or is different
		| from any of the other address families specified.
	1 inet
		| An IPv4 address.
	2 inet6
		| An IPv6 address.
	3 unix
		| The socket is local to the system, and may be bound to
		| the file system.

flags uint8 sdflags
	@cprefix SHUT_
	0x01 rd
	0x02 wr

enum uint8 signal
	| Signal condition.
	@cprefix SIG
	1  abrt
		| Process abort signal.
	2  alrm
		| Alarm clock.
	3  bus
		| Access to an undefined portion of a memory object.
	4  chld
		| Child process terminated, stopped, or continued.
	5  cont
		| Continue executing, if stopped.
	6  fpe
		| Erroneous arithmetic operation.
	7  hup
		| Hangup.
	8  ill
		| Illegal instruction.
	9  int
		| Terminale interrupt signal.
	10 kill
		| Kill (cannot be caught or ignored).
	11 pipe
		| Write on a pipe with no one to read it.
	12 quit
		| Terminal quit signal.
	13 segv
		| Invalid memory reference.
	14 stop
		| Stop executing (cannot becaught or ignored).
	15 sys
		| Bad system call.
	16 term
		| Termination signal.
	17 trap
		| Trace/breakpoint trap.
	18 tstp
		| Terminal stop signal.
	19 ttin
		| Background process attempting read.
	20 ttou
		| Background process attempting write.
	21 urg
		| High bandwidth data is available at a socket.
	22 usr1
		| User-defined signal 1.
	23 usr2
		| User-defined signal 2.
	24 vtalrm
		| Virtual timer expired.
	25 xcpu
		| CPU time limit exceeded.
	26 xfsz
		| File size limit exceeded.

flags uint8 ssflags
	@cprefix SOCKSTAT_
	0x01 clear_error

flags uint32 sstate
	@cprefix SOCKSTATE_
	0x01 acceptconn

flags uint16 subflags
	@cprefix SUBSCRIPTION_
	0x01 add
	0x02 clear
	0x04 delete
	0x08 disable
	0x10 enable
	0x20 oneshot

flags uint16 subclockflags
	@cprefix SUBSCRIPTION_CLOCK_
	0x01 abstime

flags uint16 subrwflags
	@cprefix SUBSCRIPTION_FD_READWRITE_
	0x01 poll

opaque uint32 tid
	| Unique system-local identifier of a thread. This identifier is
	| only valid during the lifetime of the thread.
	|
	| Threads must be aware of their thread identifier, as it is
	| written it into locks when acquiring them for writing. It is
	| not advised to use these identifiers for any other purpose.

alias uint64 timestamp
	| Timestamp in nanoseconds.

flags uint8 ulflags
	@cprefix UNLINK_
	0x01 removedir

alias uint64 userdata
	| User-provided value that can be attached to objects that is
	| retained when extracted from the kernel.

enum uint8 whence
	| Relative to which position the offset of the file descriptor
	| should be set.
	1 cur
		| Seek relative to current position.
	2 end
		| Seek relative to end-of-file.
	3 set
		| Seek relative to start-of-file.



function threadentry
	| Entry point for additionally created threads.
	in
		tid      tid
			| Thread ID of the current thread.
		ptr void aux
			| Copy of the value stored in
			| [threadattr.argument].



struct auxv
	auxtype a_type
	variant a_type
		argdatalen canarylen ncpus pagesz phnum tid
			size a_val
		argdata canary null phdr
			ptr void a_ptr

struct ciovec
	| A region of memory for scatter/gather writes.
	crange void iov_base iov_len iov_data
		| The address and length of the buffer to be written.

struct dirent
	| A directory entry.
	dircookie d_next
		| The offset of the next directory entry stored in this
		| directory.
	inode     d_ino
		| The serial number of the file referred to by this
		| directory entry.
	uint32    d_namlen
		| The length of the name of the directory entry.
	filetype  d_type
		| The type of the file referred to by this directory
		| entry.

struct event
	userdata  userdata
	errno     error
	eventtype type
	variant type
		clock
			struct clock
				userdata identifier
		condvar
			struct condvar
				ptr atomic condvar condvar
		fd_read fd_write
			struct fd_readwrite
				filesize     nbytes
				fd           fd
				eventrwflags flags
		lock_rdlock lock_wrlock
			struct lock
				ptr atomic lock lock
		proc_terminate
			struct proc_terminate
				fd       fd
				signal   signal
				exitcode exitcode

struct fdstat
	| File descriptor attributes.
	filetype fs_filetype
		| File type.
	fdflags  fs_flags
		| File descriptor flags.
	rights   fs_rights_base
		| Rights that apply to this file descriptor.
	rights   fs_rights_inheriting
		| Maximum set of rights that can be installed on new
		| file descriptors that are created through this file
		| descriptor, e.g., through [file_open].

struct filestat
	| File attributes.
	device    st_dev
		| Device ID of device containing the file.
	inode     st_ino
		| File serial number.
	filetype  st_filetype
		| File type.
	linkcount st_nlink
		| Number of hard links to the file.
	filesize  st_size
		| For regular files, the file size in bytes. For
		| symbolic links, the length in bytes of the pathname
		| contained in the symbolic link.
	timestamp st_atim
		| Last data access timestamp.
	timestamp st_mtim
		| Last data modification timestamp.
	timestamp st_ctim
		| Last file status change timestamp.

struct iovec
	| A region of memory for scatter/gather reads.
	range void iov_base iov_len iov_data
		| The address and length of the buffer to be filled.

struct lookup
	fd          fd
	lookupflags flags

struct recv_in
	crange iovec ri_data ri_datalen ri_data
	range fd     ri_fds  ri_fdslen  ri_fds
	msgflags     ri_flags

struct send_in
	crange ciovec si_data si_datalen si_data
	crange fd     si_fds  si_fdslen  si_fds
	msgflags      si_flags

struct send_out
	size so_datalen

struct sockaddr
	| Network address of a bound socket or its peer.
	sa_family sa_family
		| Address family.
	variant sa_family
		inet
			struct sa_inet
				array 4 uint8 addr
					| IPv4 address.
				uint16        port
					| IPv4 port number.
		inet6
			struct sa_inet6
				array 16 uint8 addr
					| IPv6 address.
				uint16         port
					| IPv6 port number.

struct recv_out
	size     ro_datalen
	size     ro_fdslen
	sockaddr ro_sockname
	sockaddr ro_peername
	msgflags ro_flags

struct sockstat
	| Socket attributes.
	sockaddr ss_sockname
		| The address to which this socket is bound.
	sockaddr ss_peername
		| The address to which this socket is connected.
	errno    ss_error
		| Error code of the last completed asynchronous
		| operation performed on this socket.
	sstate   ss_state
		| Flags describing the state of the socket.

struct subscription
	| Subscription to an event.
	userdata  userdata
		| User-provided value that is attached to the
		| subscription in the kernel and returned through
		| [event.userdata].
	subflags  flags
		| Subscription adjustment flags used by [poll_fd].
	eventtype type
		| The type of the event to which to subscribe.
	variant type
		clock
			struct clock
				userdata identifier
				clockid  clock_id
				timestamp timeout
				timestamp precision
				subclockflags flags
		condvar
			struct condvar
				ptr atomic condvar condvar
				ptr atomic lock    lock
				mflags             condvar_scope
				mflags             lock_scope
		fd_read fd_write
			struct fd_readwrite
				fd         fd
				subrwflags flags
		lock_rdlock lock_wrlock
			struct lock
				ptr atomic lock lock
				mflags          lock_scope
		proc_terminate
			struct proc_terminate
				fd       fd

struct threadattr
	| Attributes for thread creation.
	ptr threadentry entry_point
		| Initial program counter value.
	range void      stack stack_size stack
		| Region allocated to serve as stack space.
	ptr void        argument
		| Argument to be forwarded to the entry point function.



syscall 0 clock_res_get
	| Obtains the resolution of a clock.
	in
		clockid   clock_id
			| The clock for which the resolution needs to be
			| returned.
	out
		timestamp resolution
			| The resolution of the clock.

syscall 1 clock_time_get
	| Obtains the time value of a clock.
	in
		clockid   clock
			| The clock for which the time needs to be
			| returned.
		timestamp precision
			| The maximum lag (exclusive) that the returned
			| time value may have, compared to its actual
			| value.
	out
		timestamp time
			| The time value of the clock.

syscall 2 condvar_signal
	| Wakes up threads waiting on a userspace condition variable.
	|
	| If an invocation of this system call causes all waiting
	| threads to be woken up, the value of the condition variable
	| is set to [condvar.has_no_waiters]. As long as the condition
	| variable is set to this value, it is not needed to invoke this
	| system call.
	in
		ptr atomic condvar condvar
			| The userspace condition variable that has
			| waiting threads.
		mflags             scope
			| [mflags.private] if the condition variable is
			| stored in private memory. [mflags.shared] if
			| the condition variable is stored in shared
			| memory.
		nthreads           nwaiters
			| The number of threads that need to be woken
			| up. If it exceeds the number of waiting
			| threads, all threads are woken up.

syscall 3 fd_close
	| Closes a file descriptor.
	in
		fd fd
			| The file descriptor that needs to be closed.

syscall 4 fd_create1
	| Creates a file descriptor.
	in
		filetype type
			| [filetype.poll]: Creates a polling event
			| queue.
			|
			| [filetype.shared_memory]: Creates an anonymous
			| shared memory object.
			|
			| [filetype.socket_dgram]: Creates a datagram
			| socket.
			|
			| [filetype.socket_seqpacket]: Creates a
			| sequenced-packet socket.
			|
			| [filetype.socket_stream]: Creates a
			| byte-stream socket.
	out
		fd       fd
			| The file descriptor that has been created.

syscall 5 fd_create2
	| Creates a pair of file descriptors.
	in
		filetype type
			| [filetype.fifo]: Creates a pipe.
			|
			| [filetype.socket_dgram]: Creates a datagram
			| socket pair.
			|
			| [filetype.socket_seqpacket]: Creates a
			| sequenced-packet socket pair.
			|
			| [filetype.socket_stream]: Creates a
			| byte-stream socket pair.
	out
		fd       fd1
			| The first file descriptor of the pair. For
			| pipes, this corresponds to the read end.
		fd       fd2
			| The second file descriptor of the pair. For
			| pipes, this corresponds to the write end.

syscall 6 fd_datasync
	| Synchronizes the data of a file to disk.
	in
		fd fd
			| The file descriptor of the file whose data
			| needs to be synchronized to disk.

syscall 7 fd_dup
	| Duplicates a file descriptor.
	in
		fd from
			| The file descriptor that needs to be
			| duplicated.
	out
		fd fd
			| The new file descriptor.

syscall 8 fd_pread
	| Reads from a file descriptor, without using and updating the
	| file descriptor's offset.
	in
		fd           fd
			| The file descriptor from which data should be
			| read.
		crange iovec iov iovcnt iovs
			| List of scatter/gather vectors where data
			| should be stored.
		filesize     offset
			| The offset within the file at which reading
			| should start.
	out
		size         nread
			| The number of bytes read.

syscall 9 fd_pwrite
	| Writes to a file descriptor, without using and updating the
	| file descriptor's offset.
	in
		fd            fd
			| The file descriptor to which data should be
			| written.
		crange ciovec iov iovcnt iovs
			| List of scatter/gather vectors where data
			| should be retrieved.
		filesize      offset
			| The offset within the file at which writing
			| should start.
	out
		size          nwritten
			| The number of bytes written.

syscall 10 fd_read
	| Reads from a file descriptor.
	in
		fd           fd
			| The file descriptor from which data should be
			| read.
		crange iovec iov iovcnt iovs
			| List of scatter/gather vectors where data
			| should be stored.
	out
		size         nread
			| The number of bytes read.

syscall 11 fd_replace
	| Atomically replaces a file descriptor by a copy of another
	| file descriptor.
	|
	| Due to the strong focus on thread safety, this environment
	| does not provide a mechanism to duplicate a file descriptor to
	| an arbitrary number, like dup2(). This would be prone to race
	| conditions, as an actual file descriptor with the same number
	| could be allocated by a different thread at the same time.
	|
	| This system call provides a way to atomically replace file
	| descriptors, which would disappear if dup2() were to be
	| removed entirely.
	in
		fd from
			| The file descriptor that needs to be copied.
		fd to
			| The file descriptor that needs to be
			| overwritten.

syscall 12 fd_seek
	in
		fd        fd
		filedelta offset
		whence    whence
	out
		filesize newoffset

syscall 13 fd_stat_get
	in
		fd         fd
		ptr fdstat buf

syscall 14 fd_stat_put
	in
		fd          fd
		cptr fdstat buf
		fdsflags    flags

syscall 15 fd_sync
	in
		fd fd

syscall 16 fd_write
	| Writes to a file descriptor.
	in
		fd            fd
			| The file descriptor to which data should be
			| written.
		crange ciovec iov iovcnt iovs
			| List of scatter/gather vectors where data
			| should be retrieved.
	out
		size nwritten
			| The number of bytes written.

syscall 17 file_advise
	in
		fd       fd
		filesize offset
		filesize len
		advice   advice

syscall 18 file_allocate
	in
		fd       fd
		filesize offset
		filesize len

syscall 19 file_create
	| Creates a file of a specified type.
	in
		fd          fd
			| The working directory at which the resolution
			| of the file to be created starts.
		crange char path pathlen path
			| The path at which the file should be created.
		filetype    type
			| [filetype.directory]: Creates a directory.
			|
			| [filetype.fifo]: Creates a FIFO.

syscall 20 file_link
	| Creates a hard link.
	in
		lookup      fd1
			| The working directory at which the resolution
			| of the source path starts.
		crange char path1 path1len path1
			| The source path of the file that should be
			| hard linked.
		fd          fd2
			| The working directory at which the resolution
			| of the destination path starts.
		crange char path2 path2len path2
			| The destination path at which the hard link
			| should be created.

syscall 21 file_open
	in
		lookup      dirfd
		crange char path pathlen path
		oflags      oflags
		cptr fdstat fds
	out
		fd fd

syscall 22 file_readdir
	| Reads directory entries from a directory.
	|
	| When successful, the contents of the output buffer consist of
	| a sequence of directory entries. Each directory entry consists
	| of a [dirent] object, followed by [dirent.d_namlen] bytes
	| holding the name of the directory entry.
	|
	| This system call fills the output buffer as much as possible,
	| potentially truncating the last directory entry. This allows
	| the caller to grow its read buffer size in case it's too small
	| to fit a single large directory entry, or skip the oversized
	| directory entry.
	in
		fd         fd
			| The directory from which to read the directory
			| entries.
		range void buf nbyte buf
			| The buffer where directory entries are stored.
		dircookie  cookie
	out
		size bufused
			| The number of bytes stored in the read buffer.
			| If less than the size of the read buffer, the
			| end of the directory has been reached.

syscall 23 file_readlink
	| Reads the contents of a symbolic link.
	in
		fd          fd
			| The working directory at which the resolution
			| of the path of the symbolic starts.
		crange char path pathlen path
			| The path of the symbolic link whose contents
			| should be read.
		range char  buf bufsize  buf
			| The buffer where the contents of the symbolic
			| link should be stored.
	out
		size bufused
			| The number of bytes placed in the buffer.

syscall 24 file_rename
	| Renames a file.
	in
		fd          oldfd
			| The working directory at which the resolution
			| of the source path starts.
		crange char old oldlen old
			| The source path of the file that should be
			| renamed.
		fd          newfd
			| The working directory at which the resolution
			| of the destination path starts.
		crange char new newlen new
			| The destination path to which the file should
			| be renamed.

syscall 25 file_stat_fget
	| Gets attributes of a file by file descriptor.
	in
		fd           fd
			| The file descriptor whose attributes have to
			| be obtained.
		ptr filestat buf
			| The buffer where the file's attributes are
			| stored.

syscall 26 file_stat_fput
	| Adjusts attributes of a file by file descriptor.
	in
		fd            fd
			| The file descriptor whose attributes have to
			| be adjusted.
		cptr filestat buf
			| The desired values of the file attributes that
			| are adjusted.
		fsflags       flags
			| A bitmask indicating which attributes have to
			| be adjusted.

syscall 27 file_stat_get
	| Gets attributes of a file by path.
	in
		lookup       fd
			| The working directory at which the resolution
			| of the path whose attributes have to be
			| obtained starts.
		crange char  path pathlen path
			| The path of the file whose attributes have to
			| be obtained.
		ptr filestat buf
			| The buffer where the file's attributes are
			| stored.

syscall 28 file_stat_put
	| Adjusts attributes of a file by path.
	in
		lookup        fd
			| The working directory at which the resolution
			| of the path whose attributes have to be
			| adjusted starts.
		crange char   path pathlen path
			| The path of the file whose attributes have to
			| be adjusted.
		cptr filestat buf
			| The desired values of the file attributes that
			| are adjusted.
		fsflags       flags
			| A bitmask indicating which attributes have to
			| be adjusted.

syscall 29 file_symlink
	| Creates a symbolic link.
	in
		crange char path1 path1len path1
			| The contents of the symbolic link.
		fd          fd
			| The working directory at which the resolution
			| of the destination path starts.
		crange char path2 path2len path2
			| The destination path at which the symbolic
			| link should be created.

syscall 30 file_unlink
	| Unlinks a file, or removes a directory.
	in
		fd          fd
			| The working directory at which the resolution
			| of the path starts.
		crange char path pathlen path
			| The path that needs to be unlinked or removed.
		ulflags     flags
			| If [ulflags.removedir] is set, attempt to
			| remove a directory. Otherwise, unlink a file.

syscall 31 lock_unlock
	| Unlocks a write-locked userspace lock.
	|
	| If a userspace lock is unlocked while having its
	| [lock.kernel_managed] flag set, the lock cannot be unlocked in
	| userspace directly. This system call needs to be performed
	| instead, so that any waiting threads can be woken up.
	|
	| To prevent spurious invocations of this system call, the lock
	| must be locked for writing. This prevents other threads from
	| acquiring additional read locks while the system call is in
	| progress. If the lock is acquired for reading, it must first
	| be upgraded to a write lock.
	in
		ptr atomic lock lock
			| The userspace lock that is locked for writing
			| by the calling thread.
		mflags          scope
			| [mflags.private] if the lock is stored in
			| private memory. [mflags.shared] if the lock is
			| stored in shared memory.

syscall 32 mem_advise
	| Provides memory advisory information on a region of memory.
	in
		range void addr len mem
			| The pages for which to provide memory advisory
			| information.
		advice     advice
			| The advice.

syscall 33 mem_lock
	| Increments the lock count on a region of memory, which
	| prevents it from leaving system memory.
	in
		crange void addr len mem
			| The pages that need its lock count
			| incremented.

syscall 34 mem_map
	in
		range void addr len mem
		mprot      prot
		mflags     flags
		fd         fd
		filesize   off
	out
		ptr void   mem

syscall 35 mem_protect
	| Change the protection of a memory mapping.
	in
		range void addr len mem
			| The pages that need their protection changed.
		mprot      prot
			| New protection options.

syscall 36 mem_sync
	| Synchronize a region of memory with its physical storage.
	in
		range void addr len mem
			| The pages that need to be synchronized.
		msflags    flags
			| The method of synchronization.

syscall 37 mem_unlock
	| Decrements the lock count on a region of memory, which
	| prevents it from leaving system memory.
	in
		crange void addr len mem
			| The pages that need its lock count
			| decremented.

syscall 38 mem_unmap
	| Unmaps a region of memory.
	in
		range void addr len mem
			| The pages that needs to be unmapped.

syscall 39 poll
	in
		cptr subscription in
		cptr event        out
		size              nsubscriptions
	out
		size nevents

syscall 40 proc_exec
	| Replaces the process by a new executable.
	|
	| Process execution in CloudABI differs from POSIX in two ways:
	| handling of arguments and inheritance of file descriptors.
	|
	| CloudABI does not use string command line arguments. A buffer
	| with binary data is copied into the new executable instead.
	| The kernel does not enforce any specific structure to this
	| data, although CloudABI's C library uses it to store a tree
	| structure that is semantically identical to YAML.
	|
	| Due to the strong focus on thread safety, file descriptors
	| aren't inherited through close-on-exec flags. An explicit
	| list of file descriptors that need to be retained needs to be
	| provided. After execution, file descriptors are placed in the
	| order in which they are stored in the array. This not only
	| makes the execution process deterministic. It also prevents
	| potential information disclosures about the layout of the
	| original process.
	in
		fd          fd
			| A file descriptor of the new executable.
		crange void data datalen data
			| Binary argument data that is passed on to the
			| new executable.
		crange fd   fds fdslen fds
			| The layout of the file descriptor table after
			| execution.

syscall 41 proc_exit
	| Terminates the process normally.
	in
		exitcode rval
			| The exit code returned by the process. The
			| exit code can be obtained by other processes
			| through [event.proc_terminate.exitcode].
	noreturn

syscall 42 proc_fork
	| Forks the process of the calling thread.
	|
	| After forking, a new process shall be created, having only a
	| copy of the calling thread. The parent process will obtain a
	| process descriptor. When closed, the child process is
	| automatically signalled with [signal.kill].
	out
		fd  fd
			| In the parent process: the file descriptor
			| number of the process descriptor.
			|
			| In the child process: [fd.process_child].
		tid tid
			| In the parent process: undefined.
			|
			| In the child process: the thread ID of the
			| initial thread of the child process.

syscall 43 proc_raise
	| Sends a signal to the process of the calling thread.
	in
		signal sig
			| The signal condition that should be triggered.
			| If the signal causes the process to terminate,
			| its condition can be obtained by other
			| processes through
			| [event.proc_terminate.signal].

syscall 44 random_get
	| Obtains random data from the kernel random number generator.
	|
	| As this interface is not guaranteed to be fast, it is advised
	| that the random data obtained through this system call is used
	| as the seed for a userspace pseudo-random number generator.
	in
		range void buf nbyte buf
			| The buffer that needs to be filled with random
			| data.

syscall 45 sock_accept
	| Accepts an incoming connection on a listening socket.
	in
		fd           sock
			| The file descriptor of the listening socket.
		ptr sockstat buf
			| The attributes of the socket associated with
			| the incoming connection.
	out
		fd conn
			| The socket associated with the incoming
			| connection.

syscall 46 sock_bind
	| Binds a UNIX socket to a path.
	in
		fd          sock
			| The file descriptor of the socket to be bound.
		fd          fd
			| The working directory at which the resolution
			| of the path to which to bind starts.
		crange char path pathlen path
			| The path to which the socket should bind.

syscall 47 sock_connect
	| Connects a UNIX socket to another UNIX socket bound at a path.
	in
		fd          sock
			| The file descriptor of the socket to connect.
		fd          fd
			| The working directory at which the resolution
			| of the path to which to connect starts.
		crange char path pathlen path
			| The path to which the socket should onnect.

syscall 48 sock_listen
	| Listen for incoming connections on a socket.
	in
		fd      sock
			| The socket on which listening should be
			| enabled.
		backlog backlog
			| Number of incoming connections the socket is
			| capable of keeping in its backlog.

syscall 49 sock_recv
	in
		fd           sock
		cptr recv_in in
		ptr recv_out out

syscall 50 sock_send
	in
		fd           sock
		cptr send_in in
		ptr send_out out

syscall 51 sock_shutdown
	in
		fd      sock
		sdflags how

syscall 52 sock_stat_get
	in
		fd           sock
		ptr sockstat buf
		ssflags      flags

syscall 53 thread_create
	| Creates a new thread within the current process.
	in
		ptr threadattr attr
			| The desired attributes of the new thread.
	out
		tid tid
			| The thread ID of the new thread.

syscall 54 thread_exit
	| Terminates the calling thread.
	|
	| This system call can also unlock a single userspace lock
	| after termination, which can be used to implement thread
	| joining.
	in
		ptr atomic lock lock
			| Userspace lock that is locked for writing by
			| the calling thread.
		mflags          scope
			| [mflags.private] if the lock is stored in
			| private memory. [mflags.shared] if the lock is
			| stored in shared memory.
	noreturn

syscall 55 thread_tcb_set
	| Adjusts the machine-dependent TLS base address register.
	|
	| On certain architectures, the TLS base address register can
	| only be modified through privileged instructions (e.g., %fs on
	| x86). This system call can be used on those architectures to
	| adjust the contents of this register.
	|
	| The results are undefined if this system call is invoked on
	| architectures that do have writable TLS base address registers
	| (e.g., aarch64).
	in
		ptr void tcb
			| The new register contents.

syscall 56 thread_yield
	| Temporarily yields execution of the calling thread.

syscall 57 poll_fd
	in
		fd                  fd
		crange subscription in nin in
		range event         out nout out
		cptr subscription   timeout
	out
		size nevents
