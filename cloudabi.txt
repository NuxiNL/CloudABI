# Copyright (c) 2016 Nuxi, https://nuxi.nl/
#
# This file is distributed under a 2-clause BSD license.
# See the LICENSE file for details.

enum uint8 advice
	| File or memory access pattern advisory information.
	1 dontneed
		| The application expects that it will not access the
		| specified data in the near future.
	2 noreuse
		| The application expects to access the specified data
		| once and then not reuse it thereafter.
	3 normal
		| The application has no advice to give on its behavior
		| with respect to the specified data.
	4 random
		| The application expects to access the specified data
		| in a random order.
	5 sequential
		| The application expects to access the specified data
		| sequentially from lower offsets to higher offsets.
	6 willneed
		| The application expects to access the specified data
		| in the near future.

enum uint32 auxtype
	@cprefix AT_
	256 argdata
	257 argdatalen
	258 canary
	259 canarylen
	260 ncpus
	0   null
	6   pagesz
	3   phdr
	4   phnum
	261 tid

alias uint32 backlog

enum uint32 clockid
	@cprefix CLOCK_
	1 monotonic
	2 process_cputime_id
	3 realtime
	4 thread_cputime_id

opaque uint32 condvar
	| A userspace condition variable.
	0 has_no_waiters
		| The condition variable is in its initial state. There
		| are no threads waiting to be woken up. If the
		| condition variable has any other value, the kernel
		| must be called to wake up any sleeping threads.

opaque uint64 device

opaque uint64 dircookie
	| A reference to the offset of a directory entry.
	0 start
		| Permanent reference to the first directory entry
		| within a directory.

enum uint16 errno
	| Error codes returned by system calls.
	|
	| Not all of these error codes are returned by the system calls
	| provided by this environment, but are either used in userspace
	| exclusively or merely provided for alignment with POSIX.
	@cprefix E
	1  2big
		| Argument list too long.
	2  acces
		| Permission denied.
	3  addrinuse
		| Address in use.
	4  addrnotavail
		| Address not available.
	5  afnosupport
		| Address family not supported.
	6  again
		| Resource unavailable, or operation would block.
	7  already
		| Connection already in progress.
	8  badf
		| Bad file descriptor.
	9  badmsg
		| Bad message.
	10 busy
		| Device or resource busy.
	11 canceled
		| Operation canceled.
	12 child
		| No child processes.
	13 connaborted
		| Connection aborted.
	14 connrefused
		| Connection refused.
	15 connreset
		| Connection reset.
	16 deadlk
		| Resource deadlock would occur.
	17 destaddrreq
		| Destination address required.
	18 dom
		| Mathematics argument out of domain of function.
	19 dquot
		| Reserved.
	20 exist
		| File exists.
	21 fault
		| Bad address.
	22 fbig
		| File too large.
	23 hostunreach
		| Host is unreachable.
	24 idrm
		| Identifier removed.
	25 ilseq
		| Illegal byte sequence.
	26 inprogress
		| Operation in progress.
	27 intr
		| Interrupted function.
	28 inval
		| Invalid argument.
	29 io
		| I/O error.
	30 isconn
		| Socket is connected.
	31 isdir
		| Is a directory.
	32 loop
		| Too many levels of symbolic links.
	33 mfile
		| File descriptor value too large.
	34 mlink
		| Too many links.
	35 msgsize
		| Message too large.
	36 multihop
		| Reserved.
	37 nametoolong
		| Filename too long.
	38 netdown
		| Network is down.
	39 netreset
		| Connection aborted by network.
	40 netunreach
		| Network unreachable.
	41 nfile
		| Too many files open in system.
	42 nobufs
		| No buffer space available.
	43 nodev
		| No such device.
	44 noent
		| No such file or directory.
	45 noexec
		| Executable file format error.
	46 nolck
		| No locks available.
	47 nolink
		| Reserved.
	48 nomem
		| Not enough space.
	49 nomsg
		| No message of the desired type.
	50 noprotoopt
		| Protocol not available.
	51 nospc
		| No space left on device.
	52 nosys
		| Function not supported.
	53 notconn
		| The socket is not connected.
	54 notdir
		| Not a directory or a symbolic link to a directory.
	55 notempty
		| Directory not empty.
	56 notrecoverable
		| State not recoverable.
	57 notsock
		| Not a socket.
	58 notsup
		| Not supported, or operation not supported on socket.
	59 notty
		| Inappropriate I/O control operation.
	60 nxio
		| No such device or address.
	61 overflow
		| Value too large to be stored in data type.
	62 ownerdead
		| Previous owner died.
	63 perm
		| Operation not permitted.
	64 pipe
		| Broken pipe.
	65 proto
		| Protocol error.
	66 protonosupport
		| Protocol not supported.
	67 prototype
		| Protocol wrong type for socket.
	68 range
		| Result too large.
	69 rofs
		| Read-only file system.
	70 spipe
		| Invalid seek.
	71 srch
		| No such process.
	72 stale
		| Reserved.
	73 timedout
		| Connection timed out.
	74 txtbsy
		| Text file busy.
	75 xdev
		| Cross-device link.
	76 notcapable
		| Extension: Capabilities insufficient.

flags uint16 eventrwflags
	@cprefix EVENT_FD_READWRITE_
	0x01 hangup

enum uint8 eventtype
	1 clock
	2 condvar
	3 fd_read
	4 fd_write
	5 lock_rdlock
	6 lock_wrlock
	7 proc_terminate

alias uint32 exitcode
	| Exit code generated by a process when terminating normally.

opaque uint32 fd
	| A file descriptor number.
	|
	| Unlike on POSIX-compliant systems, none of the file descriptor
	| numbers are reserved for a purpose (e.g., stdin, stdout,
	| stderr). Operating systems are not required to allocate new
	| file descriptors in ascending order.
	@cprefix
	0xffffffff process_child
		| Returned to the child process by [proc_fork].
	0xffffffff map_anon_fd
		| Passed to [mem_map] when creating a mapping to
		| anonymous memory.

flags uint16 fdflags
	@cprefix FDFLAG_
	0x01 append
	0x02 dsync
	0x04 nonblock
	0x08 rsync
	0x10 sync

flags uint16 fdsflags
	@cprefix FDSTAT_
	0x01 flags
	0x02 rights

alias int64 filedelta

alias uint64 filesize

flags uint16 fsflags
	@cprefix FILESTAT_
	0x01 atim
	0x02 atim_now
	0x04 mtim
	0x08 mtim_now
	0x10 size

enum uint8 filetype
	| The type of a file descriptor or file.
	0x00 unknown
		| The type of the file descriptor or file is unknown or
		| is different from any of the other types specified.
	0x10 block_device
		| The file descriptor or file refers to a block device
		| inode.
	0x11 character_device
		| The file descriptor or file refers to a character
		| device inode.
	0x20 directory
		| The file descriptor or file refers to a directory
		| inode.
	0x30 fifo
		| The file descriptor or file refers to a FIFO inode or
		| one of the two endpoints of a pipe.
	0x40 poll
		| The file descriptor refers to a polling event queue.
	0x50 process
		| The file descriptor refers to a process handle.
	0x60 regular_file
		| The file descriptor or file refers to a regular file
		| inode.
	0x70 shared_memory
		| The file descriptor refers to a shared memory object.
	0x80 socket_dgram
		| The file descriptor or file refers to a datagram
		| socket.
	0x81 socket_seqpacket
		| The file descriptor or file refers to a
		| sequenced-packet socket.
	0x82 socket_stream
		| The file descriptor or file refers to a byte-stream
		| socket.
	0x90 symbolic_link
		| The file refers to a symbolic link inode.

opaque uint64 inode
	| File serial number that is unique within its file system.

alias uint32 linkcount
	| Number of hard links to an inode.

opaque uint32 lock
	| A userspace read-recursive readers-writer lock, similar to a
	| Linux futex or a FreeBSD umtx.
	0          unlocked
		| Value indicating that the lock is in its initial
		| unlocked state.
	0x40000000 wrlocked
		| Bitmask indicating that the lock is write-locked. The
		| lower 30 bits of the lock contain the identifier of
		| the thread that owns the write lock.
	0x80000000 kernel_managed
		| Bitmask indicating that the lock is either read locked
		| or write locked, and that one or more threads have
		| their execution suspended, waiting to acquire the
		| lock. The last owner of the lock must call the
		| kernel to unlock.
		|
		| When the lock is acquired for reading and this bit is
		| set, it means that one or more threads are attempting
		| to acquire this lock for writing. In that case, other
		| threads should only acquire additional read locks if
		| suspending execution would cause a deadlock. It is
		| preferred to suspend execution, as this prevents
		| starvation of writers.
	0x80000000 bogus
		| Value indicating that the lock is in an incorrect
		| state. A lock cannot be in its initial unlocked state,
		| while also managed by the kernel.

flags uint32 lookupflags
	@cprefix LOOKUP_
	1 symlink_follow

flags uint8 mflags
	@cprefix MAP_
	0x01 anon
	0x02 fixed
	0x04 private
	0x08 shared

flags uint8 mprot
	| Memory page protection options.
	|
	| This implementation enforces the W^X property. Pages cannot be
	| mapped for execution while also mapped for writing.
	@cprefix PROT_
	0x01 exec
		| Page can be executed.
	0x02 write
		| Page can be written.
	0x04 read
		| Page can be read.

flags uint8 msflags
	@cprefix MS_
	0x01 async
	0x02 invalidate
	0x04 sync

flags uint16 msgflags
	@cprefix MSG_
	0x01 ctrunc
	0x02 eor
	0x04 peek
	0x08 trunc
	0x10 waitall

alias uint32 nthreads
	| Specifies the number of threads sleeping on a condition
	| variable that should be woken up.

flags uint16 oflags
	@cprefix O_
	0x01 creat
	0x02 directory
	0x04 excl
	0x08 trunc

flags uint64 rights
	@cprefix RIGHT_
	0x0000000000000001 fd_datasync
	0x0000000000000002 fd_read
	0x0000000000000004 fd_seek
	0x0000000000000008 fd_stat_put_flags
	0x0000000000000010 fd_sync
	0x0000000000000020 fd_tell
	0x0000000000000040 fd_write
	0x0000000000000080 file_advise
	0x0000000000000100 file_allocate
	0x0000000000000200 file_create_directory
	0x0000000000000400 file_create_file
	0x0000000000000800 file_create_fifo
	0x0000000000001000 file_link_source
	0x0000000000002000 file_link_target
	0x0000000000004000 file_open
	0x0000000000008000 file_readdir
	0x0000000000010000 file_readlink
	0x0000000000020000 file_rename_source
	0x0000000000040000 file_rename_target
	0x0000000000080000 file_stat_fget
	0x0000000000100000 file_stat_fput_size
	0x0000000000200000 file_stat_fput_times
	0x0000000000400000 file_stat_get
	0x0000000000800000 file_stat_put_times
	0x0000000001000000 file_symlink
	0x0000000002000000 file_unlink
	0x0000000004000000 mem_map
	0x0000000008000000 mem_map_exec
	0x0000000010000000 poll_fd_readwrite
	0x0000000020000000 poll_modify
	0x0000000040000000 poll_proc_terminate
	0x0000000080000000 poll_wait
	0x0000000100000000 proc_exec
	0x0000000200000000 sock_accept
	0x0000000400000000 sock_bind_directory
	0x0000000800000000 sock_bind_socket
	0x0000001000000000 sock_connect_directory
	0x0000002000000000 sock_connect_socket
	0x0000004000000000 sock_listen
	0x0000008000000000 sock_shutdown
	0x0000010000000000 sock_stat_get

enum uint8 sa_family
	| Socket address family.
	@cprefix AF_
	0 unspec
		| The socket address family is unknown or is different
		| from any of the other address families specified.
	1 inet
		| An IPv4 address.
	2 inet6
		| An IPv6 address.
	3 unix
		| The socket is bound to the file system.

flags uint8 sdflags
	@cprefix SHUT_
	0x01 rd
	0x02 wr

enum uint8 signal
	@cprefix SIG
	1  abrt
	2  alrm
	3  bus
	4  chld
	5  cont
	6  fpe
	7  hup
	8  ill
	9  int
	10 kill
	11 pipe
	12 quit
	13 segv
	14 stop
	15 sys
	16 term
	17 trap
	18 tstp
	19 ttin
	20 ttou
	21 urg
	22 usr1
	23 usr2
	24 vtalrm
	25 xcpu
	26 xfsz

flags uint8 ssflags
	@cprefix SOCKSTAT_
	0x01 clear_error

flags uint32 sstate
	@cprefix SOCKSTATE_
	0x01 acceptconn

flags uint16 subflags
	@cprefix SUBSCRIPTION_
	0x01 add
	0x02 clear
	0x04 delete
	0x08 disable
	0x10 enable
	0x20 oneshot

flags uint16 subclockflags
	@cprefix SUBSCRIPTION_CLOCK_
	0x01 abstime

flags uint16 subrwflags
	@cprefix SUBSCRIPTION_FD_READWRITE_
	0x01 poll

opaque uint32 tid
	| Unique system-local identifier of a thread. This identifier is
	| only valid during the lifetime of the thread.
	|
	| Threads must be aware of their thread identifier, as it is
	| written it into locks when acquiring them for writing. It is
	| not advised to use these identifiers for any other purpose.

alias uint64 timestamp
	| Timestamp in nanoseconds.

flags uint8 ulflags
	@cprefix UNLINK_
	0x01 removedir

alias uint64 userdata
	| User-provided value that can be attached to objects that is
	| retained when extracted from the kernel.

enum uint8 whence
	| Relative to which position the offset of the file descriptor
	| should be set.
	1 cur
		| Seek relative to current position.
	2 end
		| Seek relative to end-of-file.
	3 set
		| Seek relative to start-of-file.



function threadentry
	in
		tid      tid
		ptr void aux



struct auxv
	auxtype a_type
	variant a_type
		argdatalen canarylen ncpus pagesz phnum tid
			size a_val
		argdata canary null phdr
			ptr void a_ptr

struct ciovec
	crange void iov_base iov_len iov_data

struct dirent
	dircookie d_next
	inode     d_ino
	uint32    d_namlen
	filetype  d_type

struct event
	userdata  userdata
	errno     error
	eventtype type
	variant type
		clock
			struct clock
				userdata identifier
		condvar
			struct condvar
				ptr atomic condvar condvar
		fd_read fd_write
			struct fd_readwrite
				filesize     nbytes
				fd           fd
				eventrwflags flags
		lock_rdlock lock_wrlock
			struct lock
				ptr atomic lock lock
		proc_terminate
			struct proc_terminate
				fd       fd
				signal   signal
				exitcode exitcode

struct fdstat
	filetype fs_filetype
	fdflags  fs_flags
	rights   fs_rights_base
	rights   fs_rights_inheriting

struct filestat
	device    st_dev
	inode     st_ino
	filetype  st_filetype
	linkcount st_nlink
	filesize  st_size
	timestamp st_atim
	timestamp st_mtim
	timestamp st_ctim

struct iovec
	range void iov_base iov_len iov_data

struct lookup
	fd          fd
	lookupflags flags

struct recv_in
	crange iovec ri_data ri_datalen ri_data
	range fd     ri_fds  ri_fdslen  ri_fds
	msgflags     ri_flags

struct send_in
	crange ciovec si_data si_datalen si_data
	crange fd     si_fds  si_fdslen  si_fds
	msgflags      si_flags

struct send_out
	size so_datalen

struct sockaddr
	sa_family sa_family
	variant sa_family
		inet
			struct sa_inet
				array 4 uint8 addr
				uint16        port
		inet6
			struct sa_inet6
				array 16 uint8 addr
				uint16         port

struct recv_out
	size     ro_datalen
	size     ro_fdslen
	sockaddr ro_sockname
	sockaddr ro_peername
	msgflags ro_flags

struct sockstat
	sockaddr ss_sockname
	sockaddr ss_peername
	errno    ss_error
	sstate   ss_state

struct subscription
	userdata  userdata
	subflags  flags
	eventtype type
	variant type
		clock
			struct clock
				userdata identifier
				clockid  clock_id
				timestamp timeout
				timestamp precision
				subclockflags flags
		condvar
			struct condvar
				ptr atomic condvar condvar
				ptr atomic lock    lock
				mflags             condvar_scope
				mflags             lock_scope
		fd_read fd_write
			struct fd_readwrite
				fd         fd
				subrwflags flags
		lock_rdlock lock_wrlock
			struct lock
				ptr atomic lock lock
				mflags          lock_scope
		proc_terminate
			struct proc_terminate
				fd       fd

struct threadattr
	ptr threadentry entry_point
	range void      stack stack_size stack
	ptr void        argument



syscall 0 clock_res_get
	in
		clockid   clock_id
	out
		timestamp resolution

syscall 1 clock_time_get
	in
		clockid   clock
		timestamp precision
	out
		timestamp time

syscall 2 condvar_signal
	in
		ptr atomic condvar condvar
		mflags             scope
		nthreads           nwaiters

syscall 3 fd_close
	in
		fd fd

syscall 4 fd_create1
	in
		filetype type
	out
		fd       fd

syscall 5 fd_create2
	in
		filetype type
	out
		fd       fd1
		fd       fd2

syscall 6 fd_datasync
	in
		fd fd

syscall 7 fd_dup
	in
		fd from
	out
		fd fd

syscall 8 fd_pread
	in
		fd           fd
		crange iovec iov iovcnt iovs
		filesize     offset
	out
		size         nread

syscall 9 fd_pwrite
	in
		fd            fd
		crange ciovec iov iovcnt iovs
		filesize      offset
	out
		size          nwritten

syscall 10 fd_read
	in
		fd           fd
		crange iovec iov iovcnt iovs
	out
		size         nread

syscall 11 fd_replace
	in
		fd from
		fd to

syscall 12 fd_seek
	in
		fd        fd
		filedelta offset
		whence    whence
	out
		filesize newoffset

syscall 13 fd_stat_get
	in
		fd         fd
		ptr fdstat buf

syscall 14 fd_stat_put
	in
		fd          fd
		cptr fdstat buf
		fdsflags    flags

syscall 15 fd_sync
	in
		fd fd

syscall 16 fd_write
	in
		fd            fd
		crange ciovec iov iovcnt iovs
	out
		size nwritten

syscall 17 file_advise
	in
		fd       fd
		filesize offset
		filesize len
		advice   advice

syscall 18 file_allocate
	in
		fd       fd
		filesize offset
		filesize len

syscall 19 file_create
	in
		fd          fd
		crange char path pathlen path
		filetype    type

syscall 20 file_link
	in
		lookup      fd1
		crange char path1 path1len path1
		fd          fd2
		crange char path2 path2len path2

syscall 21 file_open
	in
		lookup      dirfd
		crange char path pathlen path
		oflags      oflags
		cptr fdstat fds
	out
		fd fd

syscall 22 file_readdir
	in
		fd         fd
		range void buf nbyte buf
		dircookie  cookie
	out
		size bufused

syscall 23 file_readlink
	in
		fd          fd
		crange char path pathlen path
		range char  buf bufsize  buf
	out
		size bufused

syscall 24 file_rename
	in
		fd          oldfd
		crange char old oldlen old
		fd          newfd
		crange char new newlen new

syscall 25 file_stat_fget
	in
		fd           fd
		ptr filestat buf

syscall 26 file_stat_fput
	in
		fd            fd
		cptr filestat buf
		fsflags       flags

syscall 27 file_stat_get
	in
		lookup       fd
		crange char  path pathlen path
		ptr filestat buf

syscall 28 file_stat_put
	in
		lookup        fd
		crange char   path pathlen path
		cptr filestat buf
		fsflags       flags

syscall 29 file_symlink
	in
		crange char path1 path1len path1
		fd          fd
		crange char path2 path2len path2

syscall 30 file_unlink
	in
		fd          fd
		crange char path pathlen path
		ulflags     flags

syscall 31 lock_unlock
	| Unlocks a write-locked userspace lock.
	|
	| If a userspace lock is unlocked while having its
	| [lock.kernel_managed] flag set, the lock cannot be unlocked in
	| userspace directly. This system call needs to be performed
	| instead, so that any waiting threads can be woken up.
	|
	| To prevent spurious invocations of this system call, the lock
	| must be locked for writing. This prevents other threads from
	| acquiring additional read locks while the system call is in
	| progress. If the lock is acquired for reading, it must first
	| be upgraded to a write lock.
	in
		ptr atomic lock lock
			| The userspace lock that is locked for writing
			| by the calling thread.
		mflags          scope
			| [mflags.private] if the lock is stored in
			| private memory. [mflags.shared] if the lock is
			| stored in shared memory.

syscall 32 mem_advise
	in
		range void addr len mem
		advice     advice

syscall 33 mem_lock
	in
		crange void addr len mem

syscall 34 mem_map
	in
		range void addr len mem
		mprot      prot
		mflags     flags
		fd         fd
		filesize   off
	out
		ptr void   mem

syscall 35 mem_protect
	in
		range void addr len mem
		mprot      prot

syscall 36 mem_sync
	in
		range void addr len mem
		msflags    flags

syscall 37 mem_unlock
	in
		crange void addr len mem

syscall 38 mem_unmap
	in
		range void addr len mem

syscall 39 poll
	in
		cptr subscription in
		range event       out nevents out
	out
		size ntriggered

syscall 40 proc_exec
	in
		fd          fd
		crange void data datalen data
		crange fd   fds fdslen fds

syscall 41 proc_exit
	| Terminates the process normally.
	in
		exitcode rval
			| The exit code returned by the process. The
			| exit code can be obtained by other processes
			| through [event.proc_terminate.exitcode].
	noreturn

syscall 42 proc_fork
	| Forks the process of the calling thread.
	|
	| After forking, a new process shall be created, having only a
	| copy of the calling thread. The parent process will obtain a
	| process descriptor. When closed, the child process is
	| automatically signalled with [signal.kill].
	out
		fd  fd
			| In the parent process: the file descriptor
			| number of the process descriptor.
			|
			| In the child process: [fd.process_child].
		tid tid
			| In the parent process: undefined.
			|
			| In the child process: the thread ID of the
			| initial thread of the child process.

syscall 43 proc_raise
	| Sends a signal to the process of the calling thread.
	in
		signal sig
			| The signal condition that should be triggered.
			| If the signal causes the process to terminate,
			| its condition can be obtained by other
			| processes through
			| [event.proc_terminate.signal].

syscall 44 random_get
	| Obtains random data from the kernel random number generator.
	|
	| As this interface is not guaranteed to be fast, it is advised
	| that the random data obtained through this system call is used
	| as the seed for a userspace pseudo-random number generator.
	in
		range void buf nbyte buf
			| The buffer that needs to be filled with random
			| data.

syscall 45 sock_accept
	in
		fd           sock
		ptr sockstat buf
	out
		fd conn

syscall 46 sock_bind
	in
		fd          sock
		fd          fd
		crange char path pathlen path

syscall 47 sock_connect
	in
		fd          sock
		fd          fd
		crange char path pathlen path

syscall 48 sock_listen
	in
		fd      sock
		backlog backlog

syscall 49 sock_recv
	in
		fd           sock
		cptr recv_in in
		ptr recv_out out

syscall 50 sock_send
	in
		fd           sock
		cptr send_in in
		ptr send_out out

syscall 51 sock_shutdown
	in
		fd      sock
		sdflags how

syscall 52 sock_stat_get
	in
		fd           sock
		ptr sockstat buf
		ssflags      flags

syscall 53 thread_create
	in
		ptr threadattr attr
	out
		tid tid

syscall 54 thread_exit
	| Terminates the calling thread.
	|
	| This system call can also unlock a single userspace lock
	| after termination, which can be used to implement thread
	| joining.
	in
		ptr atomic lock lock
			| Userspace lock that is locked for writing by
			| the calling thread.
		mflags          scope
			| [mflags.private] if the lock is stored in
			| private memory. [mflags.shared] if the lock is
			| stored in shared memory.
	noreturn

syscall 55 thread_tcb_set
	| Adjusts the machine-dependent TLS base address register.
	|
	| On certain architectures (e.g., %fs on x86), the TLS base
	| address register can only be modified through privileged
	| instructions. This system call can be used on those
	| architectures to adjust the contents of this register.
	in
		ptr void tcb
			| The new register contents.

syscall 56 thread_yield
	| Temporarily yields execution of the calling thread.

syscall 57 poll_fd
	in
		fd                  fd
		crange subscription in nin in
		range event         out nout out
		cptr subscription   timeout
	out
		size ntriggered
