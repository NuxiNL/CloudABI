// Copyright (c) 2016 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// This file is automatically generated. Do not edit.
//
// Source: https://github.com/NuxiNL/cloudabi

pub type advice_t = u8;
pub const ADVICE_DONTNEED  : advice_t = 1;
pub const ADVICE_NOREUSE   : advice_t = 2;
pub const ADVICE_NORMAL    : advice_t = 3;
pub const ADVICE_RANDOM    : advice_t = 4;
pub const ADVICE_SEQUENTIAL: advice_t = 5;
pub const ADVICE_WILLNEED  : advice_t = 6;

pub type auxtype_t = u32;
pub const AT_ARGDATA     : auxtype_t = 256;
pub const AT_ARGDATALEN  : auxtype_t = 257;
pub const AT_BASE        : auxtype_t =   7;
pub const AT_CANARY      : auxtype_t = 258;
pub const AT_CANARYLEN   : auxtype_t = 259;
pub const AT_NCPUS       : auxtype_t = 260;
pub const AT_NULL        : auxtype_t =   0;
pub const AT_PAGESZ      : auxtype_t =   6;
pub const AT_PHDR        : auxtype_t =   3;
pub const AT_PHNUM       : auxtype_t =   4;
pub const AT_SYSINFO_EHDR: auxtype_t = 262;
pub const AT_TID         : auxtype_t = 261;

pub type backlog_t = u32;

pub type clockid_t = u32;
pub const CLOCK_MONOTONIC         : clockid_t = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: clockid_t = 2;
pub const CLOCK_REALTIME          : clockid_t = 3;
pub const CLOCK_THREAD_CPUTIME_ID : clockid_t = 4;

pub type condvar_t = u32;
pub const CONDVAR_HAS_NO_WAITERS: condvar_t = 0;

pub type device_t = u64;

pub type dircookie_t = u64;
pub const DIRCOOKIE_START: dircookie_t = 0;

pub type errno_t = u16;
pub const E2BIG          : errno_t =  1;
pub const EACCES         : errno_t =  2;
pub const EADDRINUSE     : errno_t =  3;
pub const EADDRNOTAVAIL  : errno_t =  4;
pub const EAFNOSUPPORT   : errno_t =  5;
pub const EAGAIN         : errno_t =  6;
pub const EALREADY       : errno_t =  7;
pub const EBADF          : errno_t =  8;
pub const EBADMSG        : errno_t =  9;
pub const EBUSY          : errno_t = 10;
pub const ECANCELED      : errno_t = 11;
pub const ECHILD         : errno_t = 12;
pub const ECONNABORTED   : errno_t = 13;
pub const ECONNREFUSED   : errno_t = 14;
pub const ECONNRESET     : errno_t = 15;
pub const EDEADLK        : errno_t = 16;
pub const EDESTADDRREQ   : errno_t = 17;
pub const EDOM           : errno_t = 18;
pub const EDQUOT         : errno_t = 19;
pub const EEXIST         : errno_t = 20;
pub const EFAULT         : errno_t = 21;
pub const EFBIG          : errno_t = 22;
pub const EHOSTUNREACH   : errno_t = 23;
pub const EIDRM          : errno_t = 24;
pub const EILSEQ         : errno_t = 25;
pub const EINPROGRESS    : errno_t = 26;
pub const EINTR          : errno_t = 27;
pub const EINVAL         : errno_t = 28;
pub const EIO            : errno_t = 29;
pub const EISCONN        : errno_t = 30;
pub const EISDIR         : errno_t = 31;
pub const ELOOP          : errno_t = 32;
pub const EMFILE         : errno_t = 33;
pub const EMLINK         : errno_t = 34;
pub const EMSGSIZE       : errno_t = 35;
pub const EMULTIHOP      : errno_t = 36;
pub const ENAMETOOLONG   : errno_t = 37;
pub const ENETDOWN       : errno_t = 38;
pub const ENETRESET      : errno_t = 39;
pub const ENETUNREACH    : errno_t = 40;
pub const ENFILE         : errno_t = 41;
pub const ENOBUFS        : errno_t = 42;
pub const ENODEV         : errno_t = 43;
pub const ENOENT         : errno_t = 44;
pub const ENOEXEC        : errno_t = 45;
pub const ENOLCK         : errno_t = 46;
pub const ENOLINK        : errno_t = 47;
pub const ENOMEM         : errno_t = 48;
pub const ENOMSG         : errno_t = 49;
pub const ENOPROTOOPT    : errno_t = 50;
pub const ENOSPC         : errno_t = 51;
pub const ENOSYS         : errno_t = 52;
pub const ENOTCONN       : errno_t = 53;
pub const ENOTDIR        : errno_t = 54;
pub const ENOTEMPTY      : errno_t = 55;
pub const ENOTRECOVERABLE: errno_t = 56;
pub const ENOTSOCK       : errno_t = 57;
pub const ENOTSUP        : errno_t = 58;
pub const ENOTTY         : errno_t = 59;
pub const ENXIO          : errno_t = 60;
pub const EOVERFLOW      : errno_t = 61;
pub const EOWNERDEAD     : errno_t = 62;
pub const EPERM          : errno_t = 63;
pub const EPIPE          : errno_t = 64;
pub const EPROTO         : errno_t = 65;
pub const EPROTONOSUPPORT: errno_t = 66;
pub const EPROTOTYPE     : errno_t = 67;
pub const ERANGE         : errno_t = 68;
pub const EROFS          : errno_t = 69;
pub const ESPIPE         : errno_t = 70;
pub const ESRCH          : errno_t = 71;
pub const ESTALE         : errno_t = 72;
pub const ETIMEDOUT      : errno_t = 73;
pub const ETXTBSY        : errno_t = 74;
pub const EXDEV          : errno_t = 75;
pub const ENOTCAPABLE    : errno_t = 76;

pub type eventrwflags_t = u16;
pub const EVENT_FD_READWRITE_HANGUP: eventrwflags_t = 0x0001;

pub type eventtype_t = u8;
pub const EVENTTYPE_CLOCK         : eventtype_t = 1;
pub const EVENTTYPE_CONDVAR       : eventtype_t = 2;
pub const EVENTTYPE_FD_READ       : eventtype_t = 3;
pub const EVENTTYPE_FD_WRITE      : eventtype_t = 4;
pub const EVENTTYPE_LOCK_RDLOCK   : eventtype_t = 5;
pub const EVENTTYPE_LOCK_WRLOCK   : eventtype_t = 6;
pub const EVENTTYPE_PROC_TERMINATE: eventtype_t = 7;

pub type exitcode_t = u32;

pub type fd_t = u32;
pub const PROCESS_CHILD: fd_t = 0xffffffff;
pub const MAP_ANON_FD  : fd_t = 0xffffffff;

pub type fdflags_t = u16;
pub const FDFLAG_APPEND  : fdflags_t = 0x0001;
pub const FDFLAG_DSYNC   : fdflags_t = 0x0002;
pub const FDFLAG_NONBLOCK: fdflags_t = 0x0004;
pub const FDFLAG_RSYNC   : fdflags_t = 0x0008;
pub const FDFLAG_SYNC    : fdflags_t = 0x0010;

pub type fdsflags_t = u16;
pub const FDSTAT_FLAGS : fdsflags_t = 0x0001;
pub const FDSTAT_RIGHTS: fdsflags_t = 0x0002;

pub type filedelta_t = i64;

pub type filesize_t = u64;

pub type filetype_t = u8;
pub const FILETYPE_UNKNOWN         : filetype_t =   0;
pub const FILETYPE_BLOCK_DEVICE    : filetype_t =  16;
pub const FILETYPE_CHARACTER_DEVICE: filetype_t =  17;
pub const FILETYPE_DIRECTORY       : filetype_t =  32;
pub const FILETYPE_FIFO            : filetype_t =  48;
pub const FILETYPE_POLL            : filetype_t =  64;
pub const FILETYPE_PROCESS         : filetype_t =  80;
pub const FILETYPE_REGULAR_FILE    : filetype_t =  96;
pub const FILETYPE_SHARED_MEMORY   : filetype_t = 112;
pub const FILETYPE_SOCKET_DGRAM    : filetype_t = 128;
pub const FILETYPE_SOCKET_SEQPACKET: filetype_t = 129;
pub const FILETYPE_SOCKET_STREAM   : filetype_t = 130;
pub const FILETYPE_SYMBOLIC_LINK   : filetype_t = 144;

pub type fsflags_t = u16;
pub const FILESTAT_ATIM    : fsflags_t = 0x0001;
pub const FILESTAT_ATIM_NOW: fsflags_t = 0x0002;
pub const FILESTAT_MTIM    : fsflags_t = 0x0004;
pub const FILESTAT_MTIM_NOW: fsflags_t = 0x0008;
pub const FILESTAT_SIZE    : fsflags_t = 0x0010;

pub type inode_t = u64;

pub type linkcount_t = u32;

pub type lock_t = u32;
pub const LOCK_UNLOCKED      : lock_t = 0x00000000;
pub const LOCK_WRLOCKED      : lock_t = 0x40000000;
pub const LOCK_KERNEL_MANAGED: lock_t = 0x80000000;
pub const LOCK_BOGUS         : lock_t = 0x80000000;

pub type lookupflags_t = u32;
pub const LOOKUP_SYMLINK_FOLLOW: lookupflags_t = 0x00000001;

pub type mflags_t = u8;
pub const MAP_ANON   : mflags_t = 0x01;
pub const MAP_FIXED  : mflags_t = 0x02;
pub const MAP_PRIVATE: mflags_t = 0x04;
pub const MAP_SHARED : mflags_t = 0x08;

pub type mprot_t = u8;
pub const PROT_EXEC : mprot_t = 0x01;
pub const PROT_WRITE: mprot_t = 0x02;
pub const PROT_READ : mprot_t = 0x04;

pub type msflags_t = u8;
pub const MS_ASYNC     : msflags_t = 0x01;
pub const MS_INVALIDATE: msflags_t = 0x02;
pub const MS_SYNC      : msflags_t = 0x04;

pub type msgflags_t = u16;
pub const MSG_CTRUNC : msgflags_t = 0x0001;
pub const MSG_EOR    : msgflags_t = 0x0002;
pub const MSG_PEEK   : msgflags_t = 0x0004;
pub const MSG_TRUNC  : msgflags_t = 0x0008;
pub const MSG_WAITALL: msgflags_t = 0x0010;

pub type nthreads_t = u32;

pub type oflags_t = u16;
pub const O_CREAT    : oflags_t = 0x0001;
pub const O_DIRECTORY: oflags_t = 0x0002;
pub const O_EXCL     : oflags_t = 0x0004;
pub const O_TRUNC    : oflags_t = 0x0008;

pub type rights_t = u64;
pub const RIGHT_FD_DATASYNC           : rights_t = 0x0000000000000001;
pub const RIGHT_FD_READ               : rights_t = 0x0000000000000002;
pub const RIGHT_FD_SEEK               : rights_t = 0x0000000000000004;
pub const RIGHT_FD_STAT_PUT_FLAGS     : rights_t = 0x0000000000000008;
pub const RIGHT_FD_SYNC               : rights_t = 0x0000000000000010;
pub const RIGHT_FD_TELL               : rights_t = 0x0000000000000020;
pub const RIGHT_FD_WRITE              : rights_t = 0x0000000000000040;
pub const RIGHT_FILE_ADVISE           : rights_t = 0x0000000000000080;
pub const RIGHT_FILE_ALLOCATE         : rights_t = 0x0000000000000100;
pub const RIGHT_FILE_CREATE_DIRECTORY : rights_t = 0x0000000000000200;
pub const RIGHT_FILE_CREATE_FILE      : rights_t = 0x0000000000000400;
pub const RIGHT_FILE_CREATE_FIFO      : rights_t = 0x0000000000000800;
pub const RIGHT_FILE_LINK_SOURCE      : rights_t = 0x0000000000001000;
pub const RIGHT_FILE_LINK_TARGET      : rights_t = 0x0000000000002000;
pub const RIGHT_FILE_OPEN             : rights_t = 0x0000000000004000;
pub const RIGHT_FILE_READDIR          : rights_t = 0x0000000000008000;
pub const RIGHT_FILE_READLINK         : rights_t = 0x0000000000010000;
pub const RIGHT_FILE_RENAME_SOURCE    : rights_t = 0x0000000000020000;
pub const RIGHT_FILE_RENAME_TARGET    : rights_t = 0x0000000000040000;
pub const RIGHT_FILE_STAT_FGET        : rights_t = 0x0000000000080000;
pub const RIGHT_FILE_STAT_FPUT_SIZE   : rights_t = 0x0000000000100000;
pub const RIGHT_FILE_STAT_FPUT_TIMES  : rights_t = 0x0000000000200000;
pub const RIGHT_FILE_STAT_GET         : rights_t = 0x0000000000400000;
pub const RIGHT_FILE_STAT_PUT_TIMES   : rights_t = 0x0000000000800000;
pub const RIGHT_FILE_SYMLINK          : rights_t = 0x0000000001000000;
pub const RIGHT_FILE_UNLINK           : rights_t = 0x0000000002000000;
pub const RIGHT_MEM_MAP               : rights_t = 0x0000000004000000;
pub const RIGHT_MEM_MAP_EXEC          : rights_t = 0x0000000008000000;
pub const RIGHT_POLL_FD_READWRITE     : rights_t = 0x0000000010000000;
pub const RIGHT_POLL_MODIFY           : rights_t = 0x0000000020000000;
pub const RIGHT_POLL_PROC_TERMINATE   : rights_t = 0x0000000040000000;
pub const RIGHT_POLL_WAIT             : rights_t = 0x0000000080000000;
pub const RIGHT_PROC_EXEC             : rights_t = 0x0000000100000000;
pub const RIGHT_SOCK_ACCEPT           : rights_t = 0x0000000200000000;
pub const RIGHT_SOCK_BIND_DIRECTORY   : rights_t = 0x0000000400000000;
pub const RIGHT_SOCK_BIND_SOCKET      : rights_t = 0x0000000800000000;
pub const RIGHT_SOCK_CONNECT_DIRECTORY: rights_t = 0x0000001000000000;
pub const RIGHT_SOCK_CONNECT_SOCKET   : rights_t = 0x0000002000000000;
pub const RIGHT_SOCK_LISTEN           : rights_t = 0x0000004000000000;
pub const RIGHT_SOCK_SHUTDOWN         : rights_t = 0x0000008000000000;
pub const RIGHT_SOCK_STAT_GET         : rights_t = 0x0000010000000000;

pub type sa_family_t = u8;
pub const AF_UNSPEC: sa_family_t = 0;
pub const AF_INET  : sa_family_t = 1;
pub const AF_INET6 : sa_family_t = 2;
pub const AF_UNIX  : sa_family_t = 3;

pub type scope_t = u8;
pub const SCOPE_PRIVATE: scope_t = 4;
pub const SCOPE_SHARED : scope_t = 8;

pub type sdflags_t = u8;
pub const SHUT_RD: sdflags_t = 0x01;
pub const SHUT_WR: sdflags_t = 0x02;

pub type signal_t = u8;
pub const SIGABRT  : signal_t =  1;
pub const SIGALRM  : signal_t =  2;
pub const SIGBUS   : signal_t =  3;
pub const SIGCHLD  : signal_t =  4;
pub const SIGCONT  : signal_t =  5;
pub const SIGFPE   : signal_t =  6;
pub const SIGHUP   : signal_t =  7;
pub const SIGILL   : signal_t =  8;
pub const SIGINT   : signal_t =  9;
pub const SIGKILL  : signal_t = 10;
pub const SIGPIPE  : signal_t = 11;
pub const SIGQUIT  : signal_t = 12;
pub const SIGSEGV  : signal_t = 13;
pub const SIGSTOP  : signal_t = 14;
pub const SIGSYS   : signal_t = 15;
pub const SIGTERM  : signal_t = 16;
pub const SIGTRAP  : signal_t = 17;
pub const SIGTSTP  : signal_t = 18;
pub const SIGTTIN  : signal_t = 19;
pub const SIGTTOU  : signal_t = 20;
pub const SIGURG   : signal_t = 21;
pub const SIGUSR1  : signal_t = 22;
pub const SIGUSR2  : signal_t = 23;
pub const SIGVTALRM: signal_t = 24;
pub const SIGXCPU  : signal_t = 25;
pub const SIGXFSZ  : signal_t = 26;

pub type ssflags_t = u8;
pub const SOCKSTAT_CLEAR_ERROR: ssflags_t = 0x01;

pub type sstate_t = u32;
pub const SOCKSTATE_ACCEPTCONN: sstate_t = 0x00000001;

pub type subclockflags_t = u16;
pub const SUBSCRIPTION_CLOCK_ABSTIME: subclockflags_t = 0x0001;

pub type subflags_t = u16;
pub const SUBSCRIPTION_ADD    : subflags_t = 0x0001;
pub const SUBSCRIPTION_CLEAR  : subflags_t = 0x0002;
pub const SUBSCRIPTION_DELETE : subflags_t = 0x0004;
pub const SUBSCRIPTION_DISABLE: subflags_t = 0x0008;
pub const SUBSCRIPTION_ENABLE : subflags_t = 0x0010;
pub const SUBSCRIPTION_ONESHOT: subflags_t = 0x0020;

pub type subrwflags_t = u16;
pub const SUBSCRIPTION_FD_READWRITE_POLL: subrwflags_t = 0x0001;

pub type tid_t = u32;

pub type timestamp_t = u64;

pub type ulflags_t = u8;
pub const UNLINK_REMOVEDIR: ulflags_t = 0x01;

pub type userdata_t = u64;

pub type whence_t = u8;
pub const WHENCE_CUR: whence_t = 1;
pub const WHENCE_END: whence_t = 2;
pub const WHENCE_SET: whence_t = 3;

pub struct auxv_t {
  a_type: auxtype_t,
  union {
    a_val: usize,
    a_ptr: *mut c_void,
  },
}

pub struct ciovec_t {
  iov_base: * c_void,
  iov_len: usize,
}

pub struct dirent_t {
  d_next: dircookie_t,
  d_ino: inode_t,
  d_namlen: u32,
  d_type: filetype_t,
}

pub struct event_t {
  userdata: userdata_t,
  error: errno_t,
  type: eventtype_t,
  union {
    struct clock {
      identifier: userdata_t,
    },
    struct condvar {
      condvar: *mut condvar_t,
    },
    struct fd_readwrite {
      nbytes: filesize_t,
      fd: fd_t,
      flags: eventrwflags_t,
    },
    struct lock {
      lock: *mut lock_t,
    },
    struct proc_terminate {
      fd: fd_t,
      signal: signal_t,
      exitcode: exitcode_t,
    },
  },
}

pub struct fdstat_t {
  fs_filetype: filetype_t,
  fs_flags: fdflags_t,
  fs_rights_base: rights_t,
  fs_rights_inheriting: rights_t,
}

pub struct filestat_t {
  st_dev: device_t,
  st_ino: inode_t,
  st_filetype: filetype_t,
  st_nlink: linkcount_t,
  st_size: filesize_t,
  st_atim: timestamp_t,
  st_mtim: timestamp_t,
  st_ctim: timestamp_t,
}

pub struct iovec_t {
  iov_base: *mut c_void,
  iov_len: usize,
}

pub struct lookup_t {
  fd: fd_t,
  flags: lookupflags_t,
}


pub struct recv_in_t {
  ri_data: * iovec_t,
  ri_datalen: usize,
  ri_fds: *mut fd_t,
  ri_fdslen: usize,
  ri_flags: msgflags_t,
}

pub struct send_in_t {
  si_data: * ciovec_t,
  si_datalen: usize,
  si_fds: * fd_t,
  si_fdslen: usize,
  si_flags: msgflags_t,
}

pub struct send_out_t {
  so_datalen: usize,
}

pub struct sockaddr_t {
  sa_family: sa_family_t,
  union {
    struct sa_inet {
      addr: [u8; 4],
      port: u16,
    },
    struct sa_inet6 {
      addr: [u8; 16],
      port: u16,
    },
  },
}

pub struct sockstat_t {
  ss_sockname: sockaddr_t,
  ss_peername: sockaddr_t,
  ss_error: errno_t,
  ss_state: sstate_t,
}

pub struct subscription_t {
  userdata: userdata_t,
  flags: subflags_t,
  type: eventtype_t,
  union {
    struct clock {
      identifier: userdata_t,
      clock_id: clockid_t,
      timeout: timestamp_t,
      precision: timestamp_t,
      flags: subclockflags_t,
    },
    struct condvar {
      condvar: *mut condvar_t,
      lock: *mut lock_t,
      condvar_scope: scope_t,
      lock_scope: scope_t,
    },
    struct fd_readwrite {
      fd: fd_t,
      flags: subrwflags_t,
    },
    struct lock {
      lock: *mut lock_t,
      lock_scope: scope_t,
    },
    struct proc_terminate {
      fd: fd_t,
    },
  },
}

pub struct tcb_t {
  parent: *mut c_void,
}


pub struct recv_out_t {
  ro_datalen: usize,
  ro_fdslen: usize,
  ro_sockname: sockaddr_t,
  ro_peername: sockaddr_t,
  ro_flags: msgflags_t,
}

pub struct threadattr_t {
  entry_point: * threadentry_t,
  stack: *mut c_void,
  stack_size: usize,
  argument: *mut c_void,
}

